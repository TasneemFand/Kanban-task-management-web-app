// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  accounts Account[]
  boards Board[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Board {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns Column[]
}

model Column {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boardId String @db.ObjectId  

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  tasks Task[]
}

model Task {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String?
  status String
  subtasks SubTask[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  columnId String @db.ObjectId  

  column Column @relation(fields: [columnId], references: [id], onDelete: Cascade)

}

model SubTask {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isCompleted Boolean

  taskId String @db.ObjectId  
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}